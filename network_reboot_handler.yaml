alias: System - Network Reboot Handler
description: >-
  (Version 1.1.1) This automation provides a fault-tolerant solution to prevent
  a cascade of errors from network-dependent integrations during the scheduled
  nightly reboot of the network router. It requires the 'Spook' custom
  integration to be installed via HACS.

  The automation's primary goal is to gracefully manage the state of sensitive
  integrations by proactively disabling them before the network goes down and
  re-enabling them only after the network has fully recovered. This prevents the
  Home Assistant logs from being flooded with timeout, DNS, and connection
  errors, and ensures a more stable startup for the affected components.

  This automation calls two helper scripts to perform the actual disable/enable
  actions. This modular approach allows the list of managed integrations to be
  edited easily without modifying the core logic of this handler.

  --- HELPER SCRIPT CONFIGURATION: You must create two scripts with the
  following object IDs: 1. script.network_reboot_handler_disabler 2.
  script.network_reboot_handler_enabler

  In the 'sequence' of the 'Disabler' script, add an action for each integration
  you want to disable, using the 'spook.disable_config_entry' service. Example:
  ''' sequence:
    - service: spook.disable_config_entry
      data:
        config_entry_id: xxxxxxxxxxxxxxxx
      alias: Frigate
    - service: spook.disable_config_entry
      data:
        config_entry_id: yyyyyyyyyyyyyyyy
      alias: Reolink Front Door
  '''

  In the 'sequence' of the 'Enabler' script, add a corresponding action for each
  integration using the 'spook.enable_config_entry' service. ---

  The process is initiated by a single time-based trigger at 3:00 AM. It then
  calls the disabler script and pauses its execution to wait for the network to
  come back online, with a configurable timeout. If the network recovers
  successfully, it waits for services to stabilize before calling the enabler
  script. If it times out, it sends a notification before calling the enabler
  script as a fallback. All key parameters are defined in a variables block for
  easy modification.

  - changelog:
    - 1.1.1: Updated the description to include configuration details for the
      required helper scripts.
    - 1.1.0: Refactored to call dedicated helper scripts for disabling and
      enabling integrations, removing the list of IDs from this automation.
    - 1.0.0: Initial release.
triggers:
  - at: "03:00:00"
    trigger: time
actions:
  - alias: Log Pre-Reboot Shutdown Start
    action: system_log.write
    data:
      level: info
      message: >-
        NETWORK REBOOT HANDLER (v{{ automation_version }}): Initiating
        pre-reboot shutdown of network-sensitive integrations.
  - alias: Call Disabler Script
    action: script.network_reboot_handler_disabler
  - alias: Wait for Network to Come Back Online
    wait_template: "{{ is_state(network_sensor, 'on') }}"
    timeout:
      minutes: "{{ network_recovery_timeout_minutes }}"
    continue_on_timeout: true
  - alias: Log Outcome and Stabilize Network if Successful
    choose:
      - conditions:
          - condition: template
            value_template: "{{ wait.completed }}"
        sequence:
          - alias: Log Successful Network Recovery
            action: system_log.write
            data:
              level: info
              message: >-
                NETWORK REBOOT HANDLER (v{{ automation_version }}): Network has
                recovered. Waiting {{ network_stabilization_delay_minutes }}
                minutes for services to stabilize.
          - alias: Wait for Network to Stabilize
            delay:
              minutes: "{{ network_stabilization_delay_minutes }}"
    default:
      - alias: Log Network Recovery Timeout
        action: system_log.write
        data:
          level: warning
          message: >-
            NETWORK REBOOT HANDLER (v{{ automation_version }}): Timed out after
            {{ network_recovery_timeout_minutes }} minutes waiting for network
            to recover. Proceeding with fallback re-enabling of integrations.
      - alias: Send Persistent Notification of Timeout
        action: persistent_notification.create
        data:
          title: "Network Reboot Handler: Timeout (v{{ automation_version }})"
          notification_id: network_reboot_handler_timeout_{{ now().timestamp() }}
          message: >-
            The network did not come back online within the {{
            network_recovery_timeout_minutes }}-minute timeout period after the
            scheduled reboot. The disabled integrations have been re-enabled as
            a fallback, but you may need to check your network hardware.
  - alias: Log Re-enabling of Integrations
    action: system_log.write
    data:
      level: info
      message: >-
        NETWORK REBOOT HANDLER (v{{ automation_version }}): Re-enabling
        network-sensitive integrations.
  - alias: Call Enabler Script
    action: script.network_reboot_handler_enabler
    data: {}
  - alias: Log Process Completion
    action: system_log.write
    data:
      level: info
      message: "NETWORK REBOOT HANDLER (v{{ automation_version }}): Process complete."
variables:
  automation_version: 1.1.1
  network_sensor: binary_sensor.deco_x50
  network_recovery_timeout_minutes: 5
  network_stabilization_delay_minutes: 2
mode: single
